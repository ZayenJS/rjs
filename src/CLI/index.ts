import { Command } from 'commander';
import app from '../App';
import configFile from '../ConfigFile';
import { component } from '../Files';
import hook from '../Hook';
import page from '../Page';
import { getCLIVersion } from '../utils';

class CLI extends Command {
  private _packageNameLong = 'reactivity';

  public constructor() {
    super();

    this.version(getCLIVersion(), '-v, --version');
    this._registerConfigCommand()._registerNewCommand()._registerGenerateCommand();
  }

  public getPackageName(type: 'long' | 'short' | 'rc') {
    if (type === 'long') {
      return this._packageNameLong;
    }

    const shortName = `r${this._packageNameLong.length - 2}y`;

    if (type === 'short') {
      return shortName;
    }

    if (type === 'rc') {
      return `.${shortName}rc`;
    }
  }

  private _registerConfigCommand() {
    this.command('config')
      .description(`Creates a config file for "${this._packageNameLong}"`)
      .option('-T, --type <type>', 'Specifies the framework used')
      .option(
        '--import-react',
        'This will influence the future {component} generation with the import React from "react" line',
      )
      .option(
        '-t, --typescript',
        `If true, the components generated by "${this._packageNameLong}" will use typescript`,
      )
      .option('-s, --styling <type>', 'The styling to use for the components')
      .option('-m, --css-modules', 'Whether or not to use the module styling system for css/scss')
      .option('-c, --component-type <value>', 'Whether to use funcion or class components')
      .option('-d, --component-dir <directory_path>', 'The default location to generate components')
      .action(configFile.generate);

    return this;
  }

  private _registerNewCommand() {
    const newCommand = this.command('new');
    return this._registerNewReactAppCommand(newCommand)._registerNewNextAppCommand(newCommand);
  }

  private _registerNewReactAppCommand(newCommand: Command) {
    newCommand
      .command('react-app [app-name]')
      .description('Uses create-react-app to create a new react app')
      .option('-i, --interactive', 'Starts the interactive mode')
      .option('-r, --router', 'Bootstraps a react app with built in react router')
      .option('-R, --redux', 'Bootstraps a react app with built in Redux')
      .option('-a, --axios', 'Bootstraps a react app with built in Axios')
      .option(
        '--import-react',
        'This will influence the future component generation with the import React from "react" line',
      )
      .option(
        '-t, --typescript',
        `If true, the components generated by '${this._packageNameLong}' will use typescript`,
      )
      .option('-s, --styling <type>', 'The styling to use for the components')
      .option('-m, --css-modules', 'Whether or not to use the module styling system for css/scss')
      .option('-c, --component-type <value>', 'Whether to use funcion or class components')
      .option('-d, --component-dir <directory_path>', 'The default location to generate components')
      .action(app.createReactApp);

    return this;
  }

  private _registerNewNextAppCommand(newCommand: Command) {
    newCommand
      .command('next-app  [app-name]')
      .description('Uses create-next-app to create a new next app')
      .option('-i, --interactive', 'Starts the interactive mode')
      .option('-r, --router', 'Bootstraps a react app with built in react router')
      .option('-R, --redux', 'Bootstraps a react app with built in Redux')
      .option('-a, --axios', 'Bootstraps a react app with built in Axios')
      .option(
        '--import-react',
        'This will influence the future component generation with the import React from "react" line',
      )
      .option(
        '-t, --typescript',
        `If true, the components generated by '${this._packageNameLong}' will use typescript`,
      )
      .option('-s, --styling <type>', 'The styling to use for the components')
      .option('-m, --css-modules', 'Whether or not to use the module styling system for css/scss')
      .option('-c, --component-type <value>', 'Whether to use funcion or class components')
      .option('-d, --component-dir <directory_path>', 'The default location to generate components')
      .action(app.createNextApp);

    return this;
  }

  private _registerGenerateCommand() {
    const generateCommand = this.command('generate').alias('g');

    return this._registerGenerateComponentCommand(generateCommand)
      ._registerGenerateHookCommand(generateCommand)
      ._registerGeneratePageCommand(generateCommand);
  }

  private _registerGenerateComponentCommand(generateCommand: Command) {
    generateCommand
      .command('component [component_name]')
      .alias('c')
      .description(
        'Generates a component, if no name is used, this will trigger the interactive mode',
      )
      .option('-d, --component-dir <path>', 'Will generate the component in the specified path')
      .option('-t, --typescript', 'Generates a component with typescript')
      .option('-c, --component-type <type>', 'Generate a funcion or class component')
      .option(
        '-s, --styling <type>',
        'Generates a componente with a stylesheet associated with <type> = css | scss',
      )
      .option('-m, --css-modules', 'Whether or not to use the module styling system for css/scss')
      .option(
        '--import-react',
        'This will influence the future component generation with the import React from "react" line',
      )
      .option('--flat', 'This will not generate the component inside a folder')
      .option('-T, --tag <tag_name>', 'The HTML tag to use for the component')
      .action(component.generate);

    return this;
  }

  private _registerGenerateHookCommand(generateCommand: Command) {
    generateCommand
      .command('hook <hook_name>')
      .alias('h')
      .description('Generates a custom hook with the <hook_name> in the default hooks folder')
      .option('-t, --typescript', 'Generates a hook using typescript')
      .option('-e, --use-effect', 'Adds a useEffect import to the generated file')
      .option('-s, --use-state', 'Adds a useState import to the generated file')
      .option('-S, --use-selector', 'Adds a useSelector import to the generated file')
      .option('-D, --use-dispatch', 'Adds a useDispatch import to the generated file')
      .action(hook.generate);

    return this;
  }

  private _registerGeneratePageCommand(generateCommand: Command) {
    generateCommand
      .command('page <page_name>')
      .alias('p')
      .description('Generates a page with a <page_name>')
      .option('-t, --typescript', 'Generates a page with typescript', false)
      .action(page.generate);

    return this;
  }
}

export default new CLI();
